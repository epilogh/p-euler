"""
Highly divisible triangular number

Problem 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

import math

def gauss(n):
    tri = []
    for i in range(1,n+1):
        val = int((i/2)*(i+1))
        tri.append(val)
    return tri


def p12():
    maxdiv = 0
    tris  = gauss(10000000)
    for i in tris:
        current = 0
        sqrti = int(math.sqrt(i))
        for j in range(1,sqrti):
            if i%j == 0:
                current += 2
        if current > maxdiv:
            maxdiv = current
        if maxdiv >= 500:
            return i, "first triangle number to have a factor >= 500"
    return maxdiv,"not possible in given range"

p12()

"""
my first attempt at the solution 
was taking SOOOOO long and I honestly wasn't confident in my functions

to get triangle numbers I was doing something like

    def stuff(num)
        list = []
        for i in range (1,number)
            current = 0
            for j in range(1,i) 
                current  += j
            list.append(current)
        return list

or soemthign to that effect 
not very efficient 

and for the second half, getting all the factors

    def q12()
        maxdivisor = 0
        trinums = stuff(num)
        for i in trinums
            current = 0
            for j in range(i, num+1)
                if i%j == 0:
                    current += 1
            if current > maxdivisor:
                maxdivisor = current
            if maxdivisor >= 500:
                return i 
        return maxdivisor, 'not found in range'
        
the problem was it was taking way too long
then I found : https://www2.math.upenn.edu/~deturck/m170/wk2/numdivisors.html

but I reached out to DORON (if you read some earlier solutions you  may remember) however he was also
stuck but said this wasn't helpful

then I found : https://11011110.github.io/blog/2007/04/05/triangular-numbers-with.html

david uses the factored integers in his solution but I wasn't entirely sure how to incorporate it

I wanted to stick to my work somehow. 
I was getting the factors but it was taking way too long...
so then I found : https://stackoverflow.com/a/6800214 

I saw "Why square root as the upper limit?" in the solution before seeing anything else and had a eureka moment

for the j loop, why do I need to go all the way to i+1 in the upper end of the range, when I can only go halfway and get the same result
    
    for i in tris
        for j in range(1, sqrt(i))
            if i%j == 0
                current += 2 
                
                # why 2? because you are taking into account the value and the value it is multiplied against (>sqrt)
                example : 
                    100 
                    you find that 1%100  = 0
                        you take into account that 1 and 100 are divisors
                    you find that 2%100 = 0
                        you take into account that 2 and 50 are divisors
                    you find that 4%100  = 0
                        you take into account that 4 and 25 are divisors
                    DONE
                        you found all the divisors while not exceeding 9 loops
                        rather than looping 100 times for i = 100

we end up getting the solution in 6.8s

        """
